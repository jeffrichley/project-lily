petal: "1"
name: "File Backup Workflow"
description: "Example workflow for backing up files and directories"

params:
  source_path:
    type: "str"
    required: true
    help: "Source directory or file to backup"
  backup_destination:
    type: "str"
    required: true
    help: "Destination directory for backup"
  compression:
    type: "bool"
    default: true
    help: "Enable compression for backup"
  exclude_patterns:
    type: "str"
    default: "*.tmp,*.log,.git"
    help: "Comma-separated patterns to exclude"

vars:
  backup_name: "backup_$(date +%Y%m%d_%H%M%S)"
  backup_file: "{{ params.backup_destination }}/{{ vars.backup_name }}.tar.gz"
  exclude_file: "temp/exclude_patterns.txt"

steps:
  - id: "validate_source"
    uses: "shell"
    with_:
      command: |
        if [ -e "{{ params.source_path }}" ]; then
          echo "Source path exists: {{ params.source_path }}" > output/validation.txt
        else
          echo "Source path does not exist: {{ params.source_path }}" > output/validation.txt
          exit 1
        fi
    outputs:
      validation:
        type: "str"
        path: "output/validation.txt"

  - id: "create_exclude_file"
    uses: "shell"
    needs: ["validate_source"]
    with_:
      command: |
        mkdir -p temp
        echo "{{ params.exclude_patterns }}" | tr ',' '\n' > {{ vars.exclude_file }}
        echo "Exclude patterns created" > output/exclude_created.txt
    outputs:
      exclude_created:
        type: "str"
        path: "output/exclude_created.txt"

  - id: "create_backup"
    uses: "shell"
    needs: ["create_exclude_file"]
    env:
      SOURCE_PATH: "{{ params.source_path }}"
      BACKUP_FILE: "{{ vars.backup_file }}"
      EXCLUDE_FILE: "{{ vars.exclude_file }}"
      COMPRESSION: "{{ params.compression }}"
    with_:
      command: |
        mkdir -p "{{ params.backup_destination }}"
        if [ "{{ params.compression }}" = "true" ]; then
          echo "Creating compressed backup..."
          tar -czf "{{ vars.backup_file }}" -X "{{ vars.exclude_file }}" "{{ params.source_path }}"
        else
          echo "Creating uncompressed backup..."
          tar -cf "{{ vars.backup_file }}.tar" -X "{{ vars.exclude_file }}" "{{ params.source_path }}"
        fi
        echo "Backup completed: {{ vars.backup_file }}" > output/backup_completed.txt
    outputs:
      backup_completed:
        type: "str"
        path: "output/backup_completed.txt"

  - id: "verify_backup"
    uses: "shell"
    needs: ["create_backup"]
    with_:
      command: |
        if [ -f "{{ vars.backup_file }}" ]; then
          size=$(du -h "{{ vars.backup_file }}" | cut -f1)
          echo "Backup verification passed. Size: $size" > output/verification.txt
        else
          echo "Backup verification failed" > output/verification.txt
          exit 1
        fi
    outputs:
      verification:
        type: "str"
        path: "output/verification.txt"

outputs:
  backup_file:
    from: "backup_completed"
    type: "str"
  verification:
    from: "verification"
    type: "str"
